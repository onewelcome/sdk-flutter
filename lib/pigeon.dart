// Autogenerated from Pigeon (v9.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum HttpRequestMethod {
  get,
  post,
  put,
  delete,
}

enum OWAuthenticatorType {
  pin,
  biometric,
}

enum ResourceRequestType {
  authenticated,
  implicit,
  anonymous,
  unauthenticated,
}

/// Result objects
class OWUserProfile {
  OWUserProfile({
    required this.profileId,
  });

  String profileId;

  Object encode() {
    return <Object?>[
      profileId,
    ];
  }

  static OWUserProfile decode(Object result) {
    result as List<Object?>;
    return OWUserProfile(
      profileId: result[0]! as String,
    );
  }
}

class OWCustomInfo {
  OWCustomInfo({
    required this.status,
    this.data,
  });

  int status;

  String? data;

  Object encode() {
    return <Object?>[
      status,
      data,
    ];
  }

  static OWCustomInfo decode(Object result) {
    result as List<Object?>;
    return OWCustomInfo(
      status: result[0]! as int,
      data: result[1] as String?,
    );
  }
}

class OWIdentityProvider {
  OWIdentityProvider({
    required this.id,
    required this.name,
  });

  String id;

  String name;

  Object encode() {
    return <Object?>[
      id,
      name,
    ];
  }

  static OWIdentityProvider decode(Object result) {
    result as List<Object?>;
    return OWIdentityProvider(
      id: result[0]! as String,
      name: result[1]! as String,
    );
  }
}

class OWAuthenticator {
  OWAuthenticator({
    required this.id,
    required this.name,
    required this.isRegistered,
    required this.isPreferred,
    required this.authenticatorType,
  });

  String id;

  String name;

  bool isRegistered;

  bool isPreferred;

  OWAuthenticatorType authenticatorType;

  Object encode() {
    return <Object?>[
      id,
      name,
      isRegistered,
      isPreferred,
      authenticatorType.index,
    ];
  }

  static OWAuthenticator decode(Object result) {
    result as List<Object?>;
    return OWAuthenticator(
      id: result[0]! as String,
      name: result[1]! as String,
      isRegistered: result[2]! as bool,
      isPreferred: result[3]! as bool,
      authenticatorType: OWAuthenticatorType.values[result[4]! as int],
    );
  }
}

class OWAppToWebSingleSignOn {
  OWAppToWebSingleSignOn({
    required this.token,
    required this.redirectUrl,
  });

  String token;

  String redirectUrl;

  Object encode() {
    return <Object?>[
      token,
      redirectUrl,
    ];
  }

  static OWAppToWebSingleSignOn decode(Object result) {
    result as List<Object?>;
    return OWAppToWebSingleSignOn(
      token: result[0]! as String,
      redirectUrl: result[1]! as String,
    );
  }
}

class OWRegistrationResponse {
  OWRegistrationResponse({
    required this.userProfile,
    this.customInfo,
  });

  OWUserProfile userProfile;

  OWCustomInfo? customInfo;

  Object encode() {
    return <Object?>[
      userProfile.encode(),
      customInfo?.encode(),
    ];
  }

  static OWRegistrationResponse decode(Object result) {
    result as List<Object?>;
    return OWRegistrationResponse(
      userProfile: OWUserProfile.decode(result[0]! as List<Object?>),
      customInfo: result[1] != null
          ? OWCustomInfo.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class OWRequestDetails {
  OWRequestDetails({
    required this.path,
    required this.method,
    this.headers,
    this.body,
  });

  String path;

  HttpRequestMethod method;

  Map<String?, String?>? headers;

  String? body;

  Object encode() {
    return <Object?>[
      path,
      method.index,
      headers,
      body,
    ];
  }

  static OWRequestDetails decode(Object result) {
    result as List<Object?>;
    return OWRequestDetails(
      path: result[0]! as String,
      method: HttpRequestMethod.values[result[1]! as int],
      headers: (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      body: result[3] as String?,
    );
  }
}

class OWRequestResponse {
  OWRequestResponse({
    required this.headers,
    required this.body,
    required this.ok,
    required this.status,
  });

  Map<String?, String?> headers;

  String body;

  bool ok;

  int status;

  Object encode() {
    return <Object?>[
      headers,
      body,
      ok,
      status,
    ];
  }

  static OWRequestResponse decode(Object result) {
    result as List<Object?>;
    return OWRequestResponse(
      headers: (result[0] as Map<Object?, Object?>?)!.cast<String?, String?>(),
      body: result[1]! as String,
      ok: result[2]! as bool,
      status: result[3]! as int,
    );
  }
}

class OWAuthenticationAttempt {
  OWAuthenticationAttempt({
    required this.failedAttempts,
    required this.maxAttempts,
    required this.remainingAttempts,
  });

  int failedAttempts;

  int maxAttempts;

  int remainingAttempts;

  Object encode() {
    return <Object?>[
      failedAttempts,
      maxAttempts,
      remainingAttempts,
    ];
  }

  static OWAuthenticationAttempt decode(Object result) {
    result as List<Object?>;
    return OWAuthenticationAttempt(
      failedAttempts: result[0]! as int,
      maxAttempts: result[1]! as int,
      remainingAttempts: result[2]! as int,
    );
  }
}

class OWOneginiError {
  OWOneginiError({
    required this.code,
    required this.message,
  });

  int code;

  String message;

  Object encode() {
    return <Object?>[
      code,
      message,
    ];
  }

  static OWOneginiError decode(Object result) {
    result as List<Object?>;
    return OWOneginiError(
      code: result[0]! as int,
      message: result[1]! as String,
    );
  }
}

class OWCustomIdentityProvider {
  OWCustomIdentityProvider({
    required this.providerId,
    required this.isTwoStep,
  });

  String providerId;

  bool isTwoStep;

  Object encode() {
    return <Object?>[
      providerId,
      isTwoStep,
    ];
  }

  static OWCustomIdentityProvider decode(Object result) {
    result as List<Object?>;
    return OWCustomIdentityProvider(
      providerId: result[0]! as String,
      isTwoStep: result[1]! as bool,
    );
  }
}

class _UserClientApiCodec extends StandardMessageCodec {
  const _UserClientApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is OWAppToWebSingleSignOn) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is OWAuthenticator) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is OWCustomIdentityProvider) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is OWCustomInfo) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is OWIdentityProvider) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is OWRegistrationResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is OWUserProfile) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return OWAppToWebSingleSignOn.decode(readValue(buffer)!);
      case 129:
        return OWAuthenticator.decode(readValue(buffer)!);
      case 130:
        return OWCustomIdentityProvider.decode(readValue(buffer)!);
      case 131:
        return OWCustomInfo.decode(readValue(buffer)!);
      case 132:
        return OWIdentityProvider.decode(readValue(buffer)!);
      case 133:
        return OWRegistrationResponse.decode(readValue(buffer)!);
      case 134:
        return OWUserProfile.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Flutter calls native
class UserClientApi {
  /// Constructor for [UserClientApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UserClientApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _UserClientApiCodec();

  Future<void> startApplication(
      String? arg_securityControllerClassName,
      String? arg_configModelClassName,
      List<OWCustomIdentityProvider?>? arg_customIdentityProviderConfigs,
      int? arg_connectionTimeout,
      int? arg_readTimeout,
      List<String?>? arg_additionalResourceUrls) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.startApplication', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(<Object?>[
      arg_securityControllerClassName,
      arg_configModelClassName,
      arg_customIdentityProviderConfigs,
      arg_connectionTimeout,
      arg_readTimeout,
      arg_additionalResourceUrls
    ]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<OWRegistrationResponse> registerUser(
      String? arg_identityProviderId, List<String?>? arg_scopes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.registerUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_identityProviderId, arg_scopes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWRegistrationResponse?)!;
    }
  }

  Future<void> handleRegisteredUserUrl(
      String arg_url, int arg_signInType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.handleRegisteredUserUrl', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_url, arg_signInType]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<OWIdentityProvider?>> getIdentityProviders() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getIdentityProviders', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<OWIdentityProvider?>();
    }
  }

  Future<void> deregisterUser(String arg_profileId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.deregisterUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_profileId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<OWUserProfile> getAuthenticatedUserProfile() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getAuthenticatedUserProfile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWUserProfile?)!;
    }
  }

  Future<OWRegistrationResponse> authenticateUser(
      String arg_profileId, OWAuthenticatorType arg_authenticatorType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.authenticateUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
            .send(<Object?>[arg_profileId, arg_authenticatorType.index])
        as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWRegistrationResponse?)!;
    }
  }

  Future<OWRegistrationResponse> authenticateUserPreferred(
      String arg_profileId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.authenticateUserPreferred', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_profileId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWRegistrationResponse?)!;
    }
  }

  Future<OWAuthenticator> getBiometricAuthenticator(
      String arg_profileId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getBiometricAuthenticator', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_profileId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWAuthenticator?)!;
    }
  }

  Future<OWAuthenticator> getPreferredAuthenticator(
      String arg_profileId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getPreferredAuthenticator', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_profileId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWAuthenticator?)!;
    }
  }

  Future<void> setPreferredAuthenticator(
      OWAuthenticatorType arg_authenticatorType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.setPreferredAuthenticator', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_authenticatorType.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> deregisterBiometricAuthenticator() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.deregisterBiometricAuthenticator',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> registerBiometricAuthenticator() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.registerBiometricAuthenticator',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> changePin() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.changePin', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logout() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.logout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enrollMobileAuthentication() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.enrollMobileAuthentication', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> handleMobileAuthWithOtp(String arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.handleMobileAuthWithOtp', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<OWAppToWebSingleSignOn> getAppToWebSingleSignOn(String arg_url) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getAppToWebSingleSignOn', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_url]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWAppToWebSingleSignOn?)!;
    }
  }

  Future<String> getAccessToken() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getAccessToken', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> getRedirectUrl() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getRedirectUrl', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<List<OWUserProfile?>> getUserProfiles() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.getUserProfiles', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<OWUserProfile?>();
    }
  }

  Future<void> validatePinWithPolicy(String arg_pin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.validatePinWithPolicy', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_pin]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> authenticateDevice(List<String?>? arg_scopes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.authenticateDevice', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_scopes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> authenticateUserImplicitly(
      String arg_profileId, List<String?>? arg_scopes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.authenticateUserImplicitly', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_profileId, arg_scopes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Custom Registration Callbacks
  Future<void> submitCustomRegistrationAction(
      String arg_identityProviderId, String? arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.submitCustomRegistrationAction',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_identityProviderId, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> cancelCustomRegistrationAction(
      String arg_identityProviderId, String arg_error) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.cancelCustomRegistrationAction',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_identityProviderId, arg_error]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Fingerprint Callbacks
  Future<void> fingerprintFallbackToPin() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.fingerprintFallbackToPin', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> fingerprintDenyAuthenticationRequest() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.fingerprintDenyAuthenticationRequest',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> fingerprintAcceptAuthenticationRequest() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.fingerprintAcceptAuthenticationRequest',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// OTP Callbacks
  Future<void> otpDenyAuthenticationRequest() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.otpDenyAuthenticationRequest', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> otpAcceptAuthenticationRequest() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.otpAcceptAuthenticationRequest',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Pin Authentication Callbacks
  Future<void> pinDenyAuthenticationRequest() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.pinDenyAuthenticationRequest', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pinAcceptAuthenticationRequest(String arg_pin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.pinAcceptAuthenticationRequest',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_pin]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Pin Registration Callbacks
  Future<void> pinDenyRegistrationRequest() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.pinDenyRegistrationRequest', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pinAcceptRegistrationRequest(String arg_pin) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.pinAcceptRegistrationRequest', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_pin]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Browser Registration Callbacks
  Future<void> cancelBrowserRegistration() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserClientApi.cancelBrowserRegistration', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _ResourceMethodApiCodec extends StandardMessageCodec {
  const _ResourceMethodApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is OWRequestDetails) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is OWRequestResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return OWRequestDetails.decode(readValue(buffer)!);
      case 129:
        return OWRequestResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ResourceMethodApi {
  /// Constructor for [ResourceMethodApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ResourceMethodApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ResourceMethodApiCodec();

  Future<OWRequestResponse> requestResource(
      ResourceRequestType arg_type, OWRequestDetails arg_details) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ResourceMethodApi.requestResource', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_type.index, arg_details]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as OWRequestResponse?)!;
    }
  }
}

class _NativeCallFlutterApiCodec extends StandardMessageCodec {
  const _NativeCallFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is OWAuthenticationAttempt) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is OWCustomInfo) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is OWOneginiError) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return OWAuthenticationAttempt.decode(readValue(buffer)!);
      case 129:
        return OWCustomInfo.decode(readValue(buffer)!);
      case 130:
        return OWOneginiError.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Native calls to Flutter
abstract class NativeCallFlutterApi {
  static const MessageCodec<Object?> codec = _NativeCallFlutterApiCodec();

  ///Called to handle registration URL
  void n2fHandleRegisteredUrl(String url);

  /// Called to open pin creation screen.
  void n2fOpenPinCreation();

  /// Called to close pin registration screen.
  void n2fClosePinCreation();

  /// Called to indicate that the given pin is not allowed for pin creation
  void n2fPinNotAllowed(OWOneginiError error);

  /// Called to open pin authentication screen.
  void n2fOpenPinAuthentication();

  /// Called to close pin authentication screen.
  void n2fClosePinAuthentication();

  /// Called to attempt next pin authentication.
  void n2fNextPinAuthenticationAttempt(
      OWAuthenticationAttempt authenticationAttempt);

  /// Called to open OTP authentication.
  void n2fOpenAuthOtp(String? message);

  /// Called to close OTP authentication.
  void n2fCloseAuthOtp();

  /// Called to open fingerprint screen.
  void n2fOpenFingerprintScreen();

  /// Called to close fingerprint screen.
  void n2fCloseFingerprintScreen();

  /// Called to scan fingerprint.
  void n2fShowScanningFingerprint();

  /// Called when fingerprint was received.
  void n2fNextFingerprintAuthenticationAttempt();

  /// Called when the InitCustomRegistration event occurs and a response should be given (only for two-step)
  void n2fEventInitCustomRegistration(
      OWCustomInfo? customInfo, String providerId);

  /// Called when the FinishCustomRegistration event occurs and a response should be given
  void n2fEventFinishCustomRegistration(
      OWCustomInfo? customInfo, String providerId);

  static void setup(NativeCallFlutterApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fHandleRegisteredUrl',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fHandleRegisteredUrl was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_url = (args[0] as String?);
          assert(arg_url != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fHandleRegisteredUrl was null, expected non-null String.');
          api.n2fHandleRegisteredUrl(arg_url!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenPinCreation', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fOpenPinCreation();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fClosePinCreation', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fClosePinCreation();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fPinNotAllowed', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fPinNotAllowed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OWOneginiError? arg_error = (args[0] as OWOneginiError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fPinNotAllowed was null, expected non-null OWOneginiError.');
          api.n2fPinNotAllowed(arg_error!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenPinAuthentication',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fOpenPinAuthentication();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fClosePinAuthentication',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fClosePinAuthentication();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fNextPinAuthenticationAttempt',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fNextPinAuthenticationAttempt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OWAuthenticationAttempt? arg_authenticationAttempt =
              (args[0] as OWAuthenticationAttempt?);
          assert(arg_authenticationAttempt != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fNextPinAuthenticationAttempt was null, expected non-null OWAuthenticationAttempt.');
          api.n2fNextPinAuthenticationAttempt(arg_authenticationAttempt!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenAuthOtp', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenAuthOtp was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_message = (args[0] as String?);
          api.n2fOpenAuthOtp(arg_message);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fCloseAuthOtp', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fCloseAuthOtp();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenFingerprintScreen',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fOpenFingerprintScreen();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fCloseFingerprintScreen',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fCloseFingerprintScreen();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fShowScanningFingerprint',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fShowScanningFingerprint();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fNextFingerprintAuthenticationAttempt',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.n2fNextFingerprintAuthenticationAttempt();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fEventInitCustomRegistration',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fEventInitCustomRegistration was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OWCustomInfo? arg_customInfo = (args[0] as OWCustomInfo?);
          final String? arg_providerId = (args[1] as String?);
          assert(arg_providerId != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fEventInitCustomRegistration was null, expected non-null String.');
          api.n2fEventInitCustomRegistration(arg_customInfo, arg_providerId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCallFlutterApi.n2fEventFinishCustomRegistration',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fEventFinishCustomRegistration was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OWCustomInfo? arg_customInfo = (args[0] as OWCustomInfo?);
          final String? arg_providerId = (args[1] as String?);
          assert(arg_providerId != null,
              'Argument for dev.flutter.pigeon.NativeCallFlutterApi.n2fEventFinishCustomRegistration was null, expected non-null String.');
          api.n2fEventFinishCustomRegistration(arg_customInfo, arg_providerId!);
          return;
        });
      }
    }
  }
}
