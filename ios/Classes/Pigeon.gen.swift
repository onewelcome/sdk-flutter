// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return (value as Any) as! T?
}

enum HttpRequestMethod: Int {
  case get = 0
  case post = 1
  case put = 2
  case delete = 3
}

enum OWAuthenticatorType: Int {
  case pin = 0
  case biometric = 1
}

enum ResourceRequestType: Int {
  case authenticated = 0
  case implicit = 1
  case anonymous = 2
  case unauthenticated = 3
}

/// Result objects
///
/// Generated class from Pigeon that represents data sent in messages.
struct OWUserProfile {
  var profileId: String

  static func fromList(_ list: [Any]) -> OWUserProfile? {
    let profileId = list[0] as! String

    return OWUserProfile(
      profileId: profileId
    )
  }
  func toList() -> [Any?] {
    return [
      profileId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWCustomInfo {
  var status: Int64
  var data: String? = nil

  static func fromList(_ list: [Any]) -> OWCustomInfo? {
    let status = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let data: String? = nilOrValue(list[1])

    return OWCustomInfo(
      status: status,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      status,
      data,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWIdentityProvider {
  var id: String
  var name: String

  static func fromList(_ list: [Any]) -> OWIdentityProvider? {
    let id = list[0] as! String
    let name = list[1] as! String

    return OWIdentityProvider(
      id: id,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWAuthenticator {
  var id: String
  var name: String
  var isRegistered: Bool
  var isPreferred: Bool
  var authenticatorType: OWAuthenticatorType

  static func fromList(_ list: [Any]) -> OWAuthenticator? {
    let id = list[0] as! String
    let name = list[1] as! String
    let isRegistered = list[2] as! Bool
    let isPreferred = list[3] as! Bool
    let authenticatorType = OWAuthenticatorType(rawValue: list[4] as! Int)!

    return OWAuthenticator(
      id: id,
      name: name,
      isRegistered: isRegistered,
      isPreferred: isPreferred,
      authenticatorType: authenticatorType
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      isRegistered,
      isPreferred,
      authenticatorType.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWAppToWebSingleSignOn {
  var token: String
  var redirectUrl: String

  static func fromList(_ list: [Any]) -> OWAppToWebSingleSignOn? {
    let token = list[0] as! String
    let redirectUrl = list[1] as! String

    return OWAppToWebSingleSignOn(
      token: token,
      redirectUrl: redirectUrl
    )
  }
  func toList() -> [Any?] {
    return [
      token,
      redirectUrl,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWRegistrationResponse {
  var userProfile: OWUserProfile
  var customInfo: OWCustomInfo? = nil

  static func fromList(_ list: [Any]) -> OWRegistrationResponse? {
    let userProfile = OWUserProfile.fromList(list[0] as! [Any])!
    var customInfo: OWCustomInfo? = nil
    if let customInfoList = list[1] as! [Any]? {
      customInfo = OWCustomInfo.fromList(customInfoList)
    }

    return OWRegistrationResponse(
      userProfile: userProfile,
      customInfo: customInfo
    )
  }
  func toList() -> [Any?] {
    return [
      userProfile.toList(),
      customInfo?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWRequestDetails {
  var path: String
  var method: HttpRequestMethod
  var headers: [String?: String?]? = nil
  var body: String? = nil

  static func fromList(_ list: [Any]) -> OWRequestDetails? {
    let path = list[0] as! String
    let method = HttpRequestMethod(rawValue: list[1] as! Int)!
    let headers: [String?: String?]? = nilOrValue(list[2])
    let body: String? = nilOrValue(list[3])

    return OWRequestDetails(
      path: path,
      method: method,
      headers: headers,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      path,
      method.rawValue,
      headers,
      body,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWRequestResponse {
  var headers: [String?: String?]
  var body: String
  var ok: Bool
  var status: Int64

  static func fromList(_ list: [Any]) -> OWRequestResponse? {
    let headers = list[0] as! [String?: String?]
    let body = list[1] as! String
    let ok = list[2] as! Bool
    let status = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)

    return OWRequestResponse(
      headers: headers,
      body: body,
      ok: ok,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      headers,
      body,
      ok,
      status,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWAuthenticationAttempt {
  var failedAttempts: Int64
  var maxAttempts: Int64
  var remainingAttempts: Int64

  static func fromList(_ list: [Any]) -> OWAuthenticationAttempt? {
    let failedAttempts = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let maxAttempts = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let remainingAttempts = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)

    return OWAuthenticationAttempt(
      failedAttempts: failedAttempts,
      maxAttempts: maxAttempts,
      remainingAttempts: remainingAttempts
    )
  }
  func toList() -> [Any?] {
    return [
      failedAttempts,
      maxAttempts,
      remainingAttempts,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWOneginiError {
  var code: Int64
  var message: String

  static func fromList(_ list: [Any]) -> OWOneginiError? {
    let code = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let message = list[1] as! String

    return OWOneginiError(
      code: code,
      message: message
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      message,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWCustomIdentityProvider {
  var providerId: String
  var isTwoStep: Bool

  static func fromList(_ list: [Any]) -> OWCustomIdentityProvider? {
    let providerId = list[0] as! String
    let isTwoStep = list[1] as! Bool

    return OWCustomIdentityProvider(
      providerId: providerId,
      isTwoStep: isTwoStep
    )
  }
  func toList() -> [Any?] {
    return [
      providerId,
      isTwoStep,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWBiometricMessages {
  var title: String
  var subTitle: String
  var negativeButtonText: String
  var description: String? = nil

  static func fromList(_ list: [Any]) -> OWBiometricMessages? {
    let title = list[0] as! String
    let subTitle = list[1] as! String
    let negativeButtonText = list[2] as! String
    let description: String? = nilOrValue(list[3])

    return OWBiometricMessages(
      title: title,
      subTitle: subTitle,
      negativeButtonText: negativeButtonText,
      description: description
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      subTitle,
      negativeButtonText,
      description,
    ]
  }
}

private class UserClientApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return OWAppToWebSingleSignOn.fromList(self.readValue() as! [Any])
      case 129:
        return OWAuthenticator.fromList(self.readValue() as! [Any])
      case 130:
        return OWBiometricMessages.fromList(self.readValue() as! [Any])
      case 131:
        return OWCustomIdentityProvider.fromList(self.readValue() as! [Any])
      case 132:
        return OWCustomInfo.fromList(self.readValue() as! [Any])
      case 133:
        return OWIdentityProvider.fromList(self.readValue() as! [Any])
      case 134:
        return OWRegistrationResponse.fromList(self.readValue() as! [Any])
      case 135:
        return OWUserProfile.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class UserClientApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OWAppToWebSingleSignOn {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? OWAuthenticator {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? OWBiometricMessages {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? OWCustomIdentityProvider {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? OWCustomInfo {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? OWIdentityProvider {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? OWRegistrationResponse {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? OWUserProfile {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UserClientApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UserClientApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UserClientApiCodecWriter(data: data)
  }
}

class UserClientApiCodec: FlutterStandardMessageCodec {
  static let shared = UserClientApiCodec(readerWriter: UserClientApiCodecReaderWriter())
}

/// Flutter calls native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UserClientApi {
  func startApplication(securityControllerClassName: String?, configModelClassName: String?, customIdentityProviderConfigs: [OWCustomIdentityProvider]?, connectionTimeout: Int64?, readTimeout: Int64?, additionalResourceUrls: [String]?, completion: @escaping (Result<Void, Error>) -> Void)
  func registerUser(identityProviderId: String?, scopes: [String]?, completion: @escaping (Result<OWRegistrationResponse, Error>) -> Void)
  func registerStatelessUser(identityProviderId: String?, scopes: [String]?, completion: @escaping (Result<OWRegistrationResponse, Error>) -> Void)
  func handleRegisteredUserUrl(url: String, signInType: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getIdentityProviders(completion: @escaping (Result<[OWIdentityProvider], Error>) -> Void)
  func deregisterUser(profileId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func getAuthenticatedUserProfile(completion: @escaping (Result<OWUserProfile, Error>) -> Void)
  func authenticateUser(profileId: String, authenticatorType: OWAuthenticatorType, completion: @escaping (Result<OWRegistrationResponse, Error>) -> Void)
  func authenticateUserPreferred(profileId: String, completion: @escaping (Result<OWRegistrationResponse, Error>) -> Void)
  func getBiometricAuthenticator(profileId: String, completion: @escaping (Result<OWAuthenticator, Error>) -> Void)
  func getPreferredAuthenticator(profileId: String, completion: @escaping (Result<OWAuthenticator, Error>) -> Void)
  func setPreferredAuthenticator(authenticatorType: OWAuthenticatorType, completion: @escaping (Result<Void, Error>) -> Void)
  func deregisterBiometricAuthenticator(completion: @escaping (Result<Void, Error>) -> Void)
  func registerBiometricAuthenticator(completion: @escaping (Result<Void, Error>) -> Void)
  func changePin(completion: @escaping (Result<Void, Error>) -> Void)
  func logout(completion: @escaping (Result<Void, Error>) -> Void)
  func enrollMobileAuthentication(completion: @escaping (Result<Void, Error>) -> Void)
  func handleMobileAuthWithOtp(data: String, completion: @escaping (Result<Void, Error>) -> Void)
  func getAppToWebSingleSignOn(url: String, completion: @escaping (Result<OWAppToWebSingleSignOn, Error>) -> Void)
  func getAccessToken(completion: @escaping (Result<String, Error>) -> Void)
  func getRedirectUrl(completion: @escaping (Result<String, Error>) -> Void)
  func getUserProfiles(completion: @escaping (Result<[OWUserProfile], Error>) -> Void)
  func validatePinWithPolicy(pin: String, completion: @escaping (Result<Void, Error>) -> Void)
  func authenticateDevice(scopes: [String]?, completion: @escaping (Result<Void, Error>) -> Void)
  func authenticateUserImplicitly(profileId: String, scopes: [String]?, completion: @escaping (Result<Void, Error>) -> Void)
  /// Custom Registration Callbacks
  func submitCustomRegistrationAction(data: String?, completion: @escaping (Result<Void, Error>) -> Void)
  func cancelCustomRegistrationAction(error: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Fingerprint Callbacks
  func fingerprintFallbackToPin(completion: @escaping (Result<Void, Error>) -> Void)
  func fingerprintDenyAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func fingerprintAcceptAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  /// Biometric Callbacks
  func showBiometricPrompt(messages: OWBiometricMessages, completion: @escaping (Result<Void, Error>) -> Void)
  func closeBiometricPrompt(completion: @escaping (Result<Void, Error>) -> Void)
  func biometricFallbackToPin(completion: @escaping (Result<Void, Error>) -> Void)
  func biometricDenyAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  /// OTP Callbacks
  func otpDenyAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func otpAcceptAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  /// Pin Authentication Callbacks
  func pinDenyAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func pinAcceptAuthenticationRequest(pin: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Pin Registration Callbacks
  func pinDenyRegistrationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func pinAcceptRegistrationRequest(pin: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Browser Registration Callbacks
  func cancelBrowserRegistration(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UserClientApiSetup {
  /// The codec used by UserClientApi.
  static var codec: FlutterStandardMessageCodec { UserClientApiCodec.shared }
  /// Sets up an instance of `UserClientApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UserClientApi?) {
    let startApplicationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.startApplication", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startApplicationChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let securityControllerClassNameArg: String? = nilOrValue(args[0])
        let configModelClassNameArg: String? = nilOrValue(args[1])
        let customIdentityProviderConfigsArg: [OWCustomIdentityProvider]? = nilOrValue(args[2])
        let connectionTimeoutArg: Int64? = args[3] is NSNull ? nil : (args[3] is Int64? ? args[3] as! Int64? : Int64(args[3] as! Int32))
        let readTimeoutArg: Int64? = args[4] is NSNull ? nil : (args[4] is Int64? ? args[4] as! Int64? : Int64(args[4] as! Int32))
        let additionalResourceUrlsArg: [String]? = nilOrValue(args[5])
        api.startApplication(securityControllerClassName: securityControllerClassNameArg, configModelClassName: configModelClassNameArg, customIdentityProviderConfigs: customIdentityProviderConfigsArg, connectionTimeout: connectionTimeoutArg, readTimeout: readTimeoutArg, additionalResourceUrls: additionalResourceUrlsArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      startApplicationChannel.setMessageHandler(nil)
    }
    let registerUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.registerUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let identityProviderIdArg: String? = nilOrValue(args[0])
        let scopesArg: [String]? = nilOrValue(args[1])
        api.registerUser(identityProviderId: identityProviderIdArg, scopes: scopesArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      registerUserChannel.setMessageHandler(nil)
    }
    let registerStatelessUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.registerStatelessUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerStatelessUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let identityProviderIdArg: String? = nilOrValue(args[0])
        let scopesArg: [String]? = nilOrValue(args[1])
        api.registerStatelessUser(identityProviderId: identityProviderIdArg, scopes: scopesArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      registerStatelessUserChannel.setMessageHandler(nil)
    }
    let handleRegisteredUserUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.handleRegisteredUserUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      handleRegisteredUserUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let urlArg = args[0] as! String
        let signInTypeArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.handleRegisteredUserUrl(url: urlArg, signInType: signInTypeArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      handleRegisteredUserUrlChannel.setMessageHandler(nil)
    }
    let getIdentityProvidersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getIdentityProviders", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIdentityProvidersChannel.setMessageHandler { _, reply in
        api.getIdentityProviders() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getIdentityProvidersChannel.setMessageHandler(nil)
    }
    let deregisterUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.deregisterUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deregisterUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let profileIdArg = args[0] as! String
        api.deregisterUser(profileId: profileIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      deregisterUserChannel.setMessageHandler(nil)
    }
    let getAuthenticatedUserProfileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getAuthenticatedUserProfile", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAuthenticatedUserProfileChannel.setMessageHandler { _, reply in
        api.getAuthenticatedUserProfile() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAuthenticatedUserProfileChannel.setMessageHandler(nil)
    }
    let authenticateUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.authenticateUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let profileIdArg = args[0] as! String
        let authenticatorTypeArg = OWAuthenticatorType(rawValue: args[1] as! Int)!
        api.authenticateUser(profileId: profileIdArg, authenticatorType: authenticatorTypeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateUserChannel.setMessageHandler(nil)
    }
    let authenticateUserPreferredChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.authenticateUserPreferred", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateUserPreferredChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let profileIdArg = args[0] as! String
        api.authenticateUserPreferred(profileId: profileIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateUserPreferredChannel.setMessageHandler(nil)
    }
    let getBiometricAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getBiometricAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getBiometricAuthenticatorChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let profileIdArg = args[0] as! String
        api.getBiometricAuthenticator(profileId: profileIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getBiometricAuthenticatorChannel.setMessageHandler(nil)
    }
    let getPreferredAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getPreferredAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPreferredAuthenticatorChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let profileIdArg = args[0] as! String
        api.getPreferredAuthenticator(profileId: profileIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getPreferredAuthenticatorChannel.setMessageHandler(nil)
    }
    let setPreferredAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.setPreferredAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPreferredAuthenticatorChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let authenticatorTypeArg = OWAuthenticatorType(rawValue: args[0] as! Int)!
        api.setPreferredAuthenticator(authenticatorType: authenticatorTypeArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      setPreferredAuthenticatorChannel.setMessageHandler(nil)
    }
    let deregisterBiometricAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.deregisterBiometricAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deregisterBiometricAuthenticatorChannel.setMessageHandler { _, reply in
        api.deregisterBiometricAuthenticator() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      deregisterBiometricAuthenticatorChannel.setMessageHandler(nil)
    }
    let registerBiometricAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.registerBiometricAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerBiometricAuthenticatorChannel.setMessageHandler { _, reply in
        api.registerBiometricAuthenticator() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      registerBiometricAuthenticatorChannel.setMessageHandler(nil)
    }
    let changePinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.changePin", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      changePinChannel.setMessageHandler { _, reply in
        api.changePin() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      changePinChannel.setMessageHandler(nil)
    }
    let logoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.logout", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logoutChannel.setMessageHandler { _, reply in
        api.logout() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logoutChannel.setMessageHandler(nil)
    }
    let enrollMobileAuthenticationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.enrollMobileAuthentication", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      enrollMobileAuthenticationChannel.setMessageHandler { _, reply in
        api.enrollMobileAuthentication() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      enrollMobileAuthenticationChannel.setMessageHandler(nil)
    }
    let handleMobileAuthWithOtpChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.handleMobileAuthWithOtp", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      handleMobileAuthWithOtpChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let dataArg = args[0] as! String
        api.handleMobileAuthWithOtp(data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      handleMobileAuthWithOtpChannel.setMessageHandler(nil)
    }
    let getAppToWebSingleSignOnChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getAppToWebSingleSignOn", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAppToWebSingleSignOnChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let urlArg = args[0] as! String
        api.getAppToWebSingleSignOn(url: urlArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAppToWebSingleSignOnChannel.setMessageHandler(nil)
    }
    let getAccessTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getAccessToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAccessTokenChannel.setMessageHandler { _, reply in
        api.getAccessToken() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAccessTokenChannel.setMessageHandler(nil)
    }
    let getRedirectUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getRedirectUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRedirectUrlChannel.setMessageHandler { _, reply in
        api.getRedirectUrl() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getRedirectUrlChannel.setMessageHandler(nil)
    }
    let getUserProfilesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getUserProfiles", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserProfilesChannel.setMessageHandler { _, reply in
        api.getUserProfiles() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getUserProfilesChannel.setMessageHandler(nil)
    }
    let validatePinWithPolicyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.validatePinWithPolicy", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      validatePinWithPolicyChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let pinArg = args[0] as! String
        api.validatePinWithPolicy(pin: pinArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      validatePinWithPolicyChannel.setMessageHandler(nil)
    }
    let authenticateDeviceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.authenticateDevice", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateDeviceChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let scopesArg: [String]? = nilOrValue(args[0])
        api.authenticateDevice(scopes: scopesArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateDeviceChannel.setMessageHandler(nil)
    }
    let authenticateUserImplicitlyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.authenticateUserImplicitly", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateUserImplicitlyChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let profileIdArg = args[0] as! String
        let scopesArg: [String]? = nilOrValue(args[1])
        api.authenticateUserImplicitly(profileId: profileIdArg, scopes: scopesArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateUserImplicitlyChannel.setMessageHandler(nil)
    }
    /// Custom Registration Callbacks
    let submitCustomRegistrationActionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.submitCustomRegistrationAction", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      submitCustomRegistrationActionChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let dataArg: String? = nilOrValue(args[0])
        api.submitCustomRegistrationAction(data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      submitCustomRegistrationActionChannel.setMessageHandler(nil)
    }
    let cancelCustomRegistrationActionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.cancelCustomRegistrationAction", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelCustomRegistrationActionChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let errorArg = args[0] as! String
        api.cancelCustomRegistrationAction(error: errorArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      cancelCustomRegistrationActionChannel.setMessageHandler(nil)
    }
    /// Fingerprint Callbacks
    let fingerprintFallbackToPinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.fingerprintFallbackToPin", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fingerprintFallbackToPinChannel.setMessageHandler { _, reply in
        api.fingerprintFallbackToPin() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fingerprintFallbackToPinChannel.setMessageHandler(nil)
    }
    let fingerprintDenyAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.fingerprintDenyAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fingerprintDenyAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.fingerprintDenyAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fingerprintDenyAuthenticationRequestChannel.setMessageHandler(nil)
    }
    let fingerprintAcceptAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.fingerprintAcceptAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fingerprintAcceptAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.fingerprintAcceptAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fingerprintAcceptAuthenticationRequestChannel.setMessageHandler(nil)
    }
    /// Biometric Callbacks
    let showBiometricPromptChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.showBiometricPrompt", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showBiometricPromptChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let messagesArg = args[0] as! OWBiometricMessages
        api.showBiometricPrompt(messages: messagesArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      showBiometricPromptChannel.setMessageHandler(nil)
    }
    let closeBiometricPromptChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.closeBiometricPrompt", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeBiometricPromptChannel.setMessageHandler { _, reply in
        api.closeBiometricPrompt() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      closeBiometricPromptChannel.setMessageHandler(nil)
    }
    let biometricFallbackToPinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.biometricFallbackToPin", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      biometricFallbackToPinChannel.setMessageHandler { _, reply in
        api.biometricFallbackToPin() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      biometricFallbackToPinChannel.setMessageHandler(nil)
    }
    let biometricDenyAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.biometricDenyAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      biometricDenyAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.biometricDenyAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      biometricDenyAuthenticationRequestChannel.setMessageHandler(nil)
    }
    /// OTP Callbacks
    let otpDenyAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.otpDenyAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      otpDenyAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.otpDenyAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      otpDenyAuthenticationRequestChannel.setMessageHandler(nil)
    }
    let otpAcceptAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.otpAcceptAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      otpAcceptAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.otpAcceptAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      otpAcceptAuthenticationRequestChannel.setMessageHandler(nil)
    }
    /// Pin Authentication Callbacks
    let pinDenyAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinDenyAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinDenyAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.pinDenyAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinDenyAuthenticationRequestChannel.setMessageHandler(nil)
    }
    let pinAcceptAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinAcceptAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinAcceptAuthenticationRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let pinArg = args[0] as! String
        api.pinAcceptAuthenticationRequest(pin: pinArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinAcceptAuthenticationRequestChannel.setMessageHandler(nil)
    }
    /// Pin Registration Callbacks
    let pinDenyRegistrationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinDenyRegistrationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinDenyRegistrationRequestChannel.setMessageHandler { _, reply in
        api.pinDenyRegistrationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinDenyRegistrationRequestChannel.setMessageHandler(nil)
    }
    let pinAcceptRegistrationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinAcceptRegistrationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinAcceptRegistrationRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let pinArg = args[0] as! String
        api.pinAcceptRegistrationRequest(pin: pinArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinAcceptRegistrationRequestChannel.setMessageHandler(nil)
    }
    /// Browser Registration Callbacks
    let cancelBrowserRegistrationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.cancelBrowserRegistration", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelBrowserRegistrationChannel.setMessageHandler { _, reply in
        api.cancelBrowserRegistration() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      cancelBrowserRegistrationChannel.setMessageHandler(nil)
    }
  }
}
private class ResourceMethodApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return OWRequestDetails.fromList(self.readValue() as! [Any])
      case 129:
        return OWRequestResponse.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ResourceMethodApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OWRequestDetails {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? OWRequestResponse {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ResourceMethodApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ResourceMethodApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ResourceMethodApiCodecWriter(data: data)
  }
}

class ResourceMethodApiCodec: FlutterStandardMessageCodec {
  static let shared = ResourceMethodApiCodec(readerWriter: ResourceMethodApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ResourceMethodApi {
  func requestResource(type: ResourceRequestType, details: OWRequestDetails, completion: @escaping (Result<OWRequestResponse, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ResourceMethodApiSetup {
  /// The codec used by ResourceMethodApi.
  static var codec: FlutterStandardMessageCodec { ResourceMethodApiCodec.shared }
  /// Sets up an instance of `ResourceMethodApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ResourceMethodApi?) {
    let requestResourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ResourceMethodApi.requestResource", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestResourceChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let typeArg = ResourceRequestType(rawValue: args[0] as! Int)!
        let detailsArg = args[1] as! OWRequestDetails
        api.requestResource(type: typeArg, details: detailsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestResourceChannel.setMessageHandler(nil)
    }
  }
}
private class NativeCallFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return OWAuthenticationAttempt.fromList(self.readValue() as! [Any])
      case 129:
        return OWCustomInfo.fromList(self.readValue() as! [Any])
      case 130:
        return OWOneginiError.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class NativeCallFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OWAuthenticationAttempt {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? OWCustomInfo {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? OWOneginiError {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativeCallFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeCallFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeCallFlutterApiCodecWriter(data: data)
  }
}

class NativeCallFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = NativeCallFlutterApiCodec(readerWriter: NativeCallFlutterApiCodecReaderWriter())
}

/// Native calls to Flutter
///
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class NativeCallFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return NativeCallFlutterApiCodec.shared
  }
  ///Called to handle registration URL
  func n2fHandleRegisteredUrl(url urlArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fHandleRegisteredUrl", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called to open pin creation screen.
  func n2fOpenPinCreation(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenPinCreation", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called to close pin registration screen.
  func n2fClosePinCreation(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fClosePinCreation", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called to indicate that the given pin is not allowed for pin creation
  func n2fPinNotAllowed(error errorArg: OWOneginiError, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fPinNotAllowed", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([errorArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called to open pin authentication screen.
  func n2fOpenPinAuthentication(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenPinAuthentication", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called to close pin authentication screen.
  func n2fClosePinAuthentication(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fClosePinAuthentication", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called to attempt next pin authentication.
  func n2fNextPinAuthenticationAttempt(authenticationAttempt authenticationAttemptArg: OWAuthenticationAttempt, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fNextPinAuthenticationAttempt", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([authenticationAttemptArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called to open OTP authentication.
  func n2fOpenAuthOtp(message messageArg: String?, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenAuthOtp", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([messageArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called to close OTP authentication.
  func n2fCloseAuthOtp(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fCloseAuthOtp", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called to open fingerprint screen.
  func n2fOpenFingerprintScreen(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenFingerprintScreen", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called to close fingerprint screen.
  func n2fCloseFingerprintScreen(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fCloseFingerprintScreen", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called to scan fingerprint.
  func n2fShowScanningFingerprint(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fShowScanningFingerprint", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called when fingerprint was received.
  func n2fNextFingerprintAuthenticationAttempt(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fNextFingerprintAuthenticationAttempt", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called when new biometric authentication request is made.
  func n2fStartBiometricAuthentication(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fStartBiometricAuthentication", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called when biometric authentication finishes.
  func n2fFinishBiometricAuthentication(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fFinishBiometricAuthentication", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  /// Called when the InitCustomRegistration event occurs and a response should be given (only for two-step)
  func n2fEventInitCustomRegistration(customInfo customInfoArg: OWCustomInfo?, providerId providerIdArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fEventInitCustomRegistration", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([customInfoArg, providerIdArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called when the FinishCustomRegistration event occurs and a response should be given
  func n2fEventFinishCustomRegistration(customInfo customInfoArg: OWCustomInfo?, providerId providerIdArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.n2fEventFinishCustomRegistration", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([customInfoArg, providerIdArg] as [Any?]) { _ in
      completion()
    }
  }
}
