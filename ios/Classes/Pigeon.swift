// Autogenerated from Pigeon (v9.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

enum HttpRequestMethod: Int {
  case get = 0
  case post = 1
  case put = 2
  case delete = 3
}

enum ResourceRequestType: Int {
  case authenticated = 0
  case implicit = 1
  case anonymous = 2
  case unauthenticated = 3
}

/// Result objects
///
/// Generated class from Pigeon that represents data sent in messages.
struct OWUserProfile {
  var profileId: String

  static func fromList(_ list: [Any?]) -> OWUserProfile? {
    let profileId = list[0] as! String

    return OWUserProfile(
      profileId: profileId
    )
  }
  func toList() -> [Any?] {
    return [
      profileId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWCustomInfo {
  var status: Int32
  var data: String? = nil

  static func fromList(_ list: [Any?]) -> OWCustomInfo? {
    let status = list[0] as! Int32
    let data = list[1] as? String 

    return OWCustomInfo(
      status: status,
      data: data
    )
  }
  func toList() -> [Any?] {
    return [
      status,
      data,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWIdentityProvider {
  var id: String
  var name: String

  static func fromList(_ list: [Any?]) -> OWIdentityProvider? {
    let id = list[0] as! String
    let name = list[1] as! String

    return OWIdentityProvider(
      id: id,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWAuthenticator {
  var id: String
  var name: String
  var isRegistered: Bool
  var isPreferred: Bool
  var authenticatorType: Int32

  static func fromList(_ list: [Any?]) -> OWAuthenticator? {
    let id = list[0] as! String
    let name = list[1] as! String
    let isRegistered = list[2] as! Bool
    let isPreferred = list[3] as! Bool
    let authenticatorType = list[4] as! Int32

    return OWAuthenticator(
      id: id,
      name: name,
      isRegistered: isRegistered,
      isPreferred: isPreferred,
      authenticatorType: authenticatorType
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      isRegistered,
      isPreferred,
      authenticatorType,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWAppToWebSingleSignOn {
  var token: String
  var redirectUrl: String

  static func fromList(_ list: [Any?]) -> OWAppToWebSingleSignOn? {
    let token = list[0] as! String
    let redirectUrl = list[1] as! String

    return OWAppToWebSingleSignOn(
      token: token,
      redirectUrl: redirectUrl
    )
  }
  func toList() -> [Any?] {
    return [
      token,
      redirectUrl,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWRegistrationResponse {
  var userProfile: OWUserProfile
  var customInfo: OWCustomInfo? = nil

  static func fromList(_ list: [Any?]) -> OWRegistrationResponse? {
    let userProfile = OWUserProfile.fromList(list[0] as! [Any?])!
    var customInfo: OWCustomInfo? = nil
    if let customInfoList = list[1] as? [Any?] {
      customInfo = OWCustomInfo.fromList(customInfoList)
    }

    return OWRegistrationResponse(
      userProfile: userProfile,
      customInfo: customInfo
    )
  }
  func toList() -> [Any?] {
    return [
      userProfile.toList(),
      customInfo?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWRequestDetails {
  var path: String
  var method: HttpRequestMethod
  var headers: [String?: String?]? = nil
  var body: String? = nil

  static func fromList(_ list: [Any?]) -> OWRequestDetails? {
    let path = list[0] as! String
    let method = HttpRequestMethod(rawValue: list[1] as! Int)!
    let headers = list[2] as? [String?: String?] 
    let body = list[3] as? String 

    return OWRequestDetails(
      path: path,
      method: method,
      headers: headers,
      body: body
    )
  }
  func toList() -> [Any?] {
    return [
      path,
      method.rawValue,
      headers,
      body,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OWRequestResponse {
  var headers: [String?: String?]
  var body: String
  var ok: Bool
  var status: Int32

  static func fromList(_ list: [Any?]) -> OWRequestResponse? {
    let headers = list[0] as! [String?: String?]
    let body = list[1] as! String
    let ok = list[2] as! Bool
    let status = list[3] as! Int32

    return OWRequestResponse(
      headers: headers,
      body: body,
      ok: ok,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      headers,
      body,
      ok,
      status,
    ]
  }
}

private class UserClientApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return OWAppToWebSingleSignOn.fromList(self.readValue() as! [Any])
      case 129:
        return OWAuthenticator.fromList(self.readValue() as! [Any])
      case 130:
        return OWCustomInfo.fromList(self.readValue() as! [Any])
      case 131:
        return OWIdentityProvider.fromList(self.readValue() as! [Any])
      case 132:
        return OWRegistrationResponse.fromList(self.readValue() as! [Any])
      case 133:
        return OWUserProfile.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class UserClientApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OWAppToWebSingleSignOn {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? OWAuthenticator {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? OWCustomInfo {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? OWIdentityProvider {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? OWRegistrationResponse {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? OWUserProfile {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class UserClientApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return UserClientApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return UserClientApiCodecWriter(data: data)
  }
}

class UserClientApiCodec: FlutterStandardMessageCodec {
  static let shared = UserClientApiCodec(readerWriter: UserClientApiCodecReaderWriter())
}

/// Flutter calls native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol UserClientApi {
  func registerUser(identityProviderId: String?, scopes: [String]?, completion: @escaping (Result<OWRegistrationResponse, Error>) -> Void)
  func handleRegisteredUserUrl(url: String, signInType: Int32, completion: @escaping (Result<Void, Error>) -> Void)
  func getIdentityProviders(completion: @escaping (Result<[OWIdentityProvider], Error>) -> Void)
  func deregisterUser(profileId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func getRegisteredAuthenticators(profileId: String, completion: @escaping (Result<[OWAuthenticator], Error>) -> Void)
  func getAllAuthenticators(profileId: String, completion: @escaping (Result<[OWAuthenticator], Error>) -> Void)
  func getAuthenticatedUserProfile(completion: @escaping (Result<OWUserProfile, Error>) -> Void)
  func authenticateUser(profileId: String, registeredAuthenticatorId: String?, completion: @escaping (Result<OWRegistrationResponse, Error>) -> Void)
  func getNotRegisteredAuthenticators(profileId: String, completion: @escaping (Result<[OWAuthenticator], Error>) -> Void)
  func changePin(completion: @escaping (Result<Void, Error>) -> Void)
  func setPreferredAuthenticator(authenticatorId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func deregisterAuthenticator(authenticatorId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func registerAuthenticator(authenticatorId: String, completion: @escaping (Result<Void, Error>) -> Void)
  func logout(completion: @escaping (Result<Void, Error>) -> Void)
  func mobileAuthWithOtp(data: String, completion: @escaping (Result<String?, Error>) -> Void)
  func getAppToWebSingleSignOn(url: String, completion: @escaping (Result<OWAppToWebSingleSignOn, Error>) -> Void)
  func getAccessToken(completion: @escaping (Result<String, Error>) -> Void)
  func getRedirectUrl(completion: @escaping (Result<String, Error>) -> Void)
  func getUserProfiles(completion: @escaping (Result<[OWUserProfile], Error>) -> Void)
  func validatePinWithPolicy(pin: String, completion: @escaping (Result<Void, Error>) -> Void)
  func authenticateDevice(scopes: [String]?, completion: @escaping (Result<Void, Error>) -> Void)
  func authenticateUserImplicitly(profileId: String, scopes: [String]?, completion: @escaping (Result<Void, Error>) -> Void)
  /// Custom Registration Callbacks
  func submitCustomRegistrationAction(identityProviderId: String, data: String?, completion: @escaping (Result<Void, Error>) -> Void)
  func cancelCustomRegistrationAction(identityProviderId: String, error: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Fingerprint Callbacks
  func fingerprintFallbackToPin(completion: @escaping (Result<Void, Error>) -> Void)
  func fingerprintDenyAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func fingerprintAcceptAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  /// OTP Callbacks
  func otpDenyAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func otpAcceptAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  /// Pin Authentication Callbacks
  func pinDenyAuthenticationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func pinAcceptAuthenticationRequest(pin: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Pin Registration Callbacks
  func pinDenyRegistrationRequest(completion: @escaping (Result<Void, Error>) -> Void)
  func pinAcceptRegistrationRequest(pin: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// Browser Registration Callbacks
  func cancelBrowserRegistration(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class UserClientApiSetup {
  /// The codec used by UserClientApi.
  static var codec: FlutterStandardMessageCodec { UserClientApiCodec.shared }
  /// Sets up an instance of `UserClientApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: UserClientApi?) {
    let registerUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.registerUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identityProviderIdArg = args[0] as? String
        let scopesArg = args[1] as? [String]
        api.registerUser(identityProviderId: identityProviderIdArg, scopes: scopesArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      registerUserChannel.setMessageHandler(nil)
    }
    let handleRegisteredUserUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.handleRegisteredUserUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      handleRegisteredUserUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        let signInTypeArg = args[1] as! Int32
        api.handleRegisteredUserUrl(url: urlArg, signInType: signInTypeArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      handleRegisteredUserUrlChannel.setMessageHandler(nil)
    }
    let getIdentityProvidersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getIdentityProviders", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getIdentityProvidersChannel.setMessageHandler { _, reply in
        api.getIdentityProviders() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getIdentityProvidersChannel.setMessageHandler(nil)
    }
    let deregisterUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.deregisterUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deregisterUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let profileIdArg = args[0] as! String
        api.deregisterUser(profileId: profileIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      deregisterUserChannel.setMessageHandler(nil)
    }
    let getRegisteredAuthenticatorsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getRegisteredAuthenticators", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRegisteredAuthenticatorsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let profileIdArg = args[0] as! String
        api.getRegisteredAuthenticators(profileId: profileIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getRegisteredAuthenticatorsChannel.setMessageHandler(nil)
    }
    let getAllAuthenticatorsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getAllAuthenticators", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAllAuthenticatorsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let profileIdArg = args[0] as! String
        api.getAllAuthenticators(profileId: profileIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAllAuthenticatorsChannel.setMessageHandler(nil)
    }
    let getAuthenticatedUserProfileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getAuthenticatedUserProfile", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAuthenticatedUserProfileChannel.setMessageHandler { _, reply in
        api.getAuthenticatedUserProfile() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAuthenticatedUserProfileChannel.setMessageHandler(nil)
    }
    let authenticateUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.authenticateUser", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let profileIdArg = args[0] as! String
        let registeredAuthenticatorIdArg = args[1] as? String
        api.authenticateUser(profileId: profileIdArg, registeredAuthenticatorId: registeredAuthenticatorIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateUserChannel.setMessageHandler(nil)
    }
    let getNotRegisteredAuthenticatorsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getNotRegisteredAuthenticators", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getNotRegisteredAuthenticatorsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let profileIdArg = args[0] as! String
        api.getNotRegisteredAuthenticators(profileId: profileIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getNotRegisteredAuthenticatorsChannel.setMessageHandler(nil)
    }
    let changePinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.changePin", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      changePinChannel.setMessageHandler { _, reply in
        api.changePin() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      changePinChannel.setMessageHandler(nil)
    }
    let setPreferredAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.setPreferredAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPreferredAuthenticatorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let authenticatorIdArg = args[0] as! String
        api.setPreferredAuthenticator(authenticatorId: authenticatorIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      setPreferredAuthenticatorChannel.setMessageHandler(nil)
    }
    let deregisterAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.deregisterAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deregisterAuthenticatorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let authenticatorIdArg = args[0] as! String
        api.deregisterAuthenticator(authenticatorId: authenticatorIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      deregisterAuthenticatorChannel.setMessageHandler(nil)
    }
    let registerAuthenticatorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.registerAuthenticator", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerAuthenticatorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let authenticatorIdArg = args[0] as! String
        api.registerAuthenticator(authenticatorId: authenticatorIdArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      registerAuthenticatorChannel.setMessageHandler(nil)
    }
    let logoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.logout", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logoutChannel.setMessageHandler { _, reply in
        api.logout() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logoutChannel.setMessageHandler(nil)
    }
    let mobileAuthWithOtpChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.mobileAuthWithOtp", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mobileAuthWithOtpChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dataArg = args[0] as! String
        api.mobileAuthWithOtp(data: dataArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      mobileAuthWithOtpChannel.setMessageHandler(nil)
    }
    let getAppToWebSingleSignOnChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getAppToWebSingleSignOn", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAppToWebSingleSignOnChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let urlArg = args[0] as! String
        api.getAppToWebSingleSignOn(url: urlArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAppToWebSingleSignOnChannel.setMessageHandler(nil)
    }
    let getAccessTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getAccessToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAccessTokenChannel.setMessageHandler { _, reply in
        api.getAccessToken() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getAccessTokenChannel.setMessageHandler(nil)
    }
    let getRedirectUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getRedirectUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getRedirectUrlChannel.setMessageHandler { _, reply in
        api.getRedirectUrl() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getRedirectUrlChannel.setMessageHandler(nil)
    }
    let getUserProfilesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.getUserProfiles", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserProfilesChannel.setMessageHandler { _, reply in
        api.getUserProfiles() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getUserProfilesChannel.setMessageHandler(nil)
    }
    let validatePinWithPolicyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.validatePinWithPolicy", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      validatePinWithPolicyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pinArg = args[0] as! String
        api.validatePinWithPolicy(pin: pinArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      validatePinWithPolicyChannel.setMessageHandler(nil)
    }
    let authenticateDeviceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.authenticateDevice", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateDeviceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let scopesArg = args[0] as? [String]
        api.authenticateDevice(scopes: scopesArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateDeviceChannel.setMessageHandler(nil)
    }
    let authenticateUserImplicitlyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.authenticateUserImplicitly", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateUserImplicitlyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let profileIdArg = args[0] as! String
        let scopesArg = args[1] as? [String]
        api.authenticateUserImplicitly(profileId: profileIdArg, scopes: scopesArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateUserImplicitlyChannel.setMessageHandler(nil)
    }
    /// Custom Registration Callbacks
    let submitCustomRegistrationActionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.submitCustomRegistrationAction", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      submitCustomRegistrationActionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identityProviderIdArg = args[0] as! String
        let dataArg = args[1] as? String
        api.submitCustomRegistrationAction(identityProviderId: identityProviderIdArg, data: dataArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      submitCustomRegistrationActionChannel.setMessageHandler(nil)
    }
    let cancelCustomRegistrationActionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.cancelCustomRegistrationAction", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelCustomRegistrationActionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identityProviderIdArg = args[0] as! String
        let errorArg = args[1] as! String
        api.cancelCustomRegistrationAction(identityProviderId: identityProviderIdArg, error: errorArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      cancelCustomRegistrationActionChannel.setMessageHandler(nil)
    }
    /// Fingerprint Callbacks
    let fingerprintFallbackToPinChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.fingerprintFallbackToPin", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fingerprintFallbackToPinChannel.setMessageHandler { _, reply in
        api.fingerprintFallbackToPin() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fingerprintFallbackToPinChannel.setMessageHandler(nil)
    }
    let fingerprintDenyAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.fingerprintDenyAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fingerprintDenyAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.fingerprintDenyAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fingerprintDenyAuthenticationRequestChannel.setMessageHandler(nil)
    }
    let fingerprintAcceptAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.fingerprintAcceptAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fingerprintAcceptAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.fingerprintAcceptAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fingerprintAcceptAuthenticationRequestChannel.setMessageHandler(nil)
    }
    /// OTP Callbacks
    let otpDenyAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.otpDenyAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      otpDenyAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.otpDenyAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      otpDenyAuthenticationRequestChannel.setMessageHandler(nil)
    }
    let otpAcceptAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.otpAcceptAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      otpAcceptAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.otpAcceptAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      otpAcceptAuthenticationRequestChannel.setMessageHandler(nil)
    }
    /// Pin Authentication Callbacks
    let pinDenyAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinDenyAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinDenyAuthenticationRequestChannel.setMessageHandler { _, reply in
        api.pinDenyAuthenticationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinDenyAuthenticationRequestChannel.setMessageHandler(nil)
    }
    let pinAcceptAuthenticationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinAcceptAuthenticationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinAcceptAuthenticationRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pinArg = args[0] as! String
        api.pinAcceptAuthenticationRequest(pin: pinArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinAcceptAuthenticationRequestChannel.setMessageHandler(nil)
    }
    /// Pin Registration Callbacks
    let pinDenyRegistrationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinDenyRegistrationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinDenyRegistrationRequestChannel.setMessageHandler { _, reply in
        api.pinDenyRegistrationRequest() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinDenyRegistrationRequestChannel.setMessageHandler(nil)
    }
    let pinAcceptRegistrationRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.pinAcceptRegistrationRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pinAcceptRegistrationRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pinArg = args[0] as! String
        api.pinAcceptRegistrationRequest(pin: pinArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      pinAcceptRegistrationRequestChannel.setMessageHandler(nil)
    }
    /// Browser Registration Callbacks
    let cancelBrowserRegistrationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.UserClientApi.cancelBrowserRegistration", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelBrowserRegistrationChannel.setMessageHandler { _, reply in
        api.cancelBrowserRegistration() { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      cancelBrowserRegistrationChannel.setMessageHandler(nil)
    }
  }
}
private class ResourceMethodApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return OWRequestDetails.fromList(self.readValue() as! [Any])
      case 129:
        return OWRequestResponse.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ResourceMethodApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OWRequestDetails {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? OWRequestResponse {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ResourceMethodApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ResourceMethodApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ResourceMethodApiCodecWriter(data: data)
  }
}

class ResourceMethodApiCodec: FlutterStandardMessageCodec {
  static let shared = ResourceMethodApiCodec(readerWriter: ResourceMethodApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ResourceMethodApi {
  func requestResource(type: ResourceRequestType, details: OWRequestDetails, completion: @escaping (Result<OWRequestResponse, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ResourceMethodApiSetup {
  /// The codec used by ResourceMethodApi.
  static var codec: FlutterStandardMessageCodec { ResourceMethodApiCodec.shared }
  /// Sets up an instance of `ResourceMethodApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ResourceMethodApi?) {
    let requestResourceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ResourceMethodApi.requestResource", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestResourceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let typeArg = ResourceRequestType(rawValue: args[0] as! Int)!
        let detailsArg = args[1] as! OWRequestDetails
        api.requestResource(type: typeArg, details: detailsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestResourceChannel.setMessageHandler(nil)
    }
  }
}
/// Native calls to Flutter
///
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class NativeCallFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func testEventFunction(argument argumentArg: String, completion: @escaping (String) -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NativeCallFlutterApi.testEventFunction", binaryMessenger: binaryMessenger)
    channel.sendMessage([argumentArg] as [Any?]) { response in
      let result = response as! String
      completion(result)
    }
  }
}
