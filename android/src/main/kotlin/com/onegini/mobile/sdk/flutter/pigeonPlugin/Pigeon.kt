// Autogenerated from Pigeon (v9.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.onegini.mobile.sdk.flutter.pigeonPlugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class HttpRequestMethod(val raw: Int) {
  GET(0),
  POST(1),
  PUT(2),
  DELETE(3);

  companion object {
    fun ofRaw(raw: Int): HttpRequestMethod? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ResourceRequestType(val raw: Int) {
  AUTHENTICATED(0),
  IMPLICIT(1),
  ANONYMOUS(2),
  UNAUTHENTICATED(3);

  companion object {
    fun ofRaw(raw: Int): ResourceRequestType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Result objects
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class OWUserProfile (
  val profileId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWUserProfile {
      val profileId = list[0] as String
      return OWUserProfile(profileId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      profileId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWCustomInfo (
  val status: Long,
  val data: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWCustomInfo {
      val status = list[0].let { if (it is Int) it.toLong() else it as Long }
      val data = list[1] as String?
      return OWCustomInfo(status, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      status,
      data,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWIdentityProvider (
  val id: String,
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWIdentityProvider {
      val id = list[0] as String
      val name = list[1] as String
      return OWIdentityProvider(id, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWAuthenticator (
  val id: String,
  val name: String,
  val isRegistered: Boolean,
  val isPreferred: Boolean,
  val authenticatorType: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWAuthenticator {
      val id = list[0] as String
      val name = list[1] as String
      val isRegistered = list[2] as Boolean
      val isPreferred = list[3] as Boolean
      val authenticatorType = list[4].let { if (it is Int) it.toLong() else it as Long }
      return OWAuthenticator(id, name, isRegistered, isPreferred, authenticatorType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
      isRegistered,
      isPreferred,
      authenticatorType,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWAppToWebSingleSignOn (
  val token: String,
  val redirectUrl: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWAppToWebSingleSignOn {
      val token = list[0] as String
      val redirectUrl = list[1] as String
      return OWAppToWebSingleSignOn(token, redirectUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      token,
      redirectUrl,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWRegistrationResponse (
  val userProfile: OWUserProfile,
  val customInfo: OWCustomInfo? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWRegistrationResponse {
      val userProfile = OWUserProfile.fromList(list[0] as List<Any?>)
      val customInfo: OWCustomInfo? = (list[1] as List<Any?>?)?.let {
        OWCustomInfo.fromList(it)
      }
      return OWRegistrationResponse(userProfile, customInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userProfile.toList(),
      customInfo?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWRequestDetails (
  val path: String,
  val method: HttpRequestMethod,
  val headers: Map<String?, String?>? = null,
  val body: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWRequestDetails {
      val path = list[0] as String
      val method = HttpRequestMethod.ofRaw(list[1] as Int)!!
      val headers = list[2] as Map<String?, String?>?
      val body = list[3] as String?
      return OWRequestDetails(path, method, headers, body)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      path,
      method.raw,
      headers,
      body,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWRequestResponse (
  val headers: Map<String?, String?>,
  val body: String,
  val ok: Boolean,
  val status: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWRequestResponse {
      val headers = list[0] as Map<String?, String?>
      val body = list[1] as String
      val ok = list[2] as Boolean
      val status = list[3].let { if (it is Int) it.toLong() else it as Long }
      return OWRequestResponse(headers, body, ok, status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      headers,
      body,
      ok,
      status,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWAuthenticationAttempt (
  val failedAttempts: Long,
  val maxAttempts: Long,
  val remainingAttempts: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWAuthenticationAttempt {
      val failedAttempts = list[0].let { if (it is Int) it.toLong() else it as Long }
      val maxAttempts = list[1].let { if (it is Int) it.toLong() else it as Long }
      val remainingAttempts = list[2].let { if (it is Int) it.toLong() else it as Long }
      return OWAuthenticationAttempt(failedAttempts, maxAttempts, remainingAttempts)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      failedAttempts,
      maxAttempts,
      remainingAttempts,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OWOneginiError (
  val code: Long,
  val message: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OWOneginiError {
      val code = list[0].let { if (it is Int) it.toLong() else it as Long }
      val message = list[1] as String
      return OWOneginiError(code, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      message,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object UserClientApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWAppToWebSingleSignOn.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWAuthenticator.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWCustomInfo.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWIdentityProvider.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWRegistrationResponse.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWUserProfile.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is OWAppToWebSingleSignOn -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is OWAuthenticator -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is OWCustomInfo -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is OWIdentityProvider -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is OWRegistrationResponse -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is OWUserProfile -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Flutter calls native
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface UserClientApi {
  fun registerUser(identityProviderId: String?, scopes: List<String>?, callback: (Result<OWRegistrationResponse>) -> Unit)
  fun handleRegisteredUserUrl(url: String, signInType: Long, callback: (Result<Unit>) -> Unit)
  fun getIdentityProviders(callback: (Result<List<OWIdentityProvider>>) -> Unit)
  fun deregisterUser(profileId: String, callback: (Result<Unit>) -> Unit)
  fun getRegisteredAuthenticators(profileId: String, callback: (Result<List<OWAuthenticator>>) -> Unit)
  fun getAllAuthenticators(profileId: String, callback: (Result<List<OWAuthenticator>>) -> Unit)
  fun getAuthenticatedUserProfile(callback: (Result<OWUserProfile>) -> Unit)
  fun authenticateUser(profileId: String, registeredAuthenticatorId: String?, callback: (Result<OWRegistrationResponse>) -> Unit)
  fun getNotRegisteredAuthenticators(profileId: String, callback: (Result<List<OWAuthenticator>>) -> Unit)
  fun changePin(callback: (Result<Unit>) -> Unit)
  fun setPreferredAuthenticator(authenticatorId: String, callback: (Result<Unit>) -> Unit)
  fun deregisterAuthenticator(authenticatorId: String, callback: (Result<Unit>) -> Unit)
  fun registerAuthenticator(authenticatorId: String, callback: (Result<Unit>) -> Unit)
  fun logout(callback: (Result<Unit>) -> Unit)
  fun mobileAuthWithOtp(data: String, callback: (Result<String?>) -> Unit)
  fun getAppToWebSingleSignOn(url: String, callback: (Result<OWAppToWebSingleSignOn>) -> Unit)
  fun getAccessToken(callback: (Result<String>) -> Unit)
  fun getRedirectUrl(callback: (Result<String>) -> Unit)
  fun getUserProfiles(callback: (Result<List<OWUserProfile>>) -> Unit)
  fun validatePinWithPolicy(pin: String, callback: (Result<Unit>) -> Unit)
  fun authenticateDevice(scopes: List<String>?, callback: (Result<Unit>) -> Unit)
  fun authenticateUserImplicitly(profileId: String, scopes: List<String>?, callback: (Result<Unit>) -> Unit)
  /** Custom Registration Callbacks */
  fun submitCustomRegistrationAction(identityProviderId: String, data: String?, callback: (Result<Unit>) -> Unit)
  fun cancelCustomRegistrationAction(identityProviderId: String, error: String, callback: (Result<Unit>) -> Unit)
  /** Fingerprint Callbacks */
  fun fingerprintFallbackToPin(callback: (Result<Unit>) -> Unit)
  fun fingerprintDenyAuthenticationRequest(callback: (Result<Unit>) -> Unit)
  fun fingerprintAcceptAuthenticationRequest(callback: (Result<Unit>) -> Unit)
  /** OTP Callbacks */
  fun otpDenyAuthenticationRequest(callback: (Result<Unit>) -> Unit)
  fun otpAcceptAuthenticationRequest(callback: (Result<Unit>) -> Unit)
  /** Pin Authentication Callbacks */
  fun pinDenyAuthenticationRequest(callback: (Result<Unit>) -> Unit)
  fun pinAcceptAuthenticationRequest(pin: String, callback: (Result<Unit>) -> Unit)
  /** Pin Registration Callbacks */
  fun pinDenyRegistrationRequest(callback: (Result<Unit>) -> Unit)
  fun pinAcceptRegistrationRequest(pin: String, callback: (Result<Unit>) -> Unit)
  /** Browser Registration Callbacks */
  fun cancelBrowserRegistration(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by UserClientApi. */
    val codec: MessageCodec<Any?> by lazy {
      UserClientApiCodec
    }
    /** Sets up an instance of `UserClientApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: UserClientApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.registerUser", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identityProviderIdArg = args[0] as String?
            val scopesArg = args[1] as List<String>?
            api.registerUser(identityProviderIdArg, scopesArg) { result: Result<OWRegistrationResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.handleRegisteredUserUrl", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val signInTypeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.handleRegisteredUserUrl(urlArg, signInTypeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getIdentityProviders", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getIdentityProviders() { result: Result<List<OWIdentityProvider>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.deregisterUser", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileIdArg = args[0] as String
            api.deregisterUser(profileIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getRegisteredAuthenticators", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileIdArg = args[0] as String
            api.getRegisteredAuthenticators(profileIdArg) { result: Result<List<OWAuthenticator>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getAllAuthenticators", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileIdArg = args[0] as String
            api.getAllAuthenticators(profileIdArg) { result: Result<List<OWAuthenticator>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getAuthenticatedUserProfile", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getAuthenticatedUserProfile() { result: Result<OWUserProfile> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.authenticateUser", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileIdArg = args[0] as String
            val registeredAuthenticatorIdArg = args[1] as String?
            api.authenticateUser(profileIdArg, registeredAuthenticatorIdArg) { result: Result<OWRegistrationResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getNotRegisteredAuthenticators", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileIdArg = args[0] as String
            api.getNotRegisteredAuthenticators(profileIdArg) { result: Result<List<OWAuthenticator>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.changePin", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.changePin() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.setPreferredAuthenticator", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authenticatorIdArg = args[0] as String
            api.setPreferredAuthenticator(authenticatorIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.deregisterAuthenticator", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authenticatorIdArg = args[0] as String
            api.deregisterAuthenticator(authenticatorIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.registerAuthenticator", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authenticatorIdArg = args[0] as String
            api.registerAuthenticator(authenticatorIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.logout", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.logout() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.mobileAuthWithOtp", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as String
            api.mobileAuthWithOtp(dataArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getAppToWebSingleSignOn", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            api.getAppToWebSingleSignOn(urlArg) { result: Result<OWAppToWebSingleSignOn> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getAccessToken", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getAccessToken() { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getRedirectUrl", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getRedirectUrl() { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.getUserProfiles", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getUserProfiles() { result: Result<List<OWUserProfile>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.validatePinWithPolicy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pinArg = args[0] as String
            api.validatePinWithPolicy(pinArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.authenticateDevice", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val scopesArg = args[0] as List<String>?
            api.authenticateDevice(scopesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.authenticateUserImplicitly", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val profileIdArg = args[0] as String
            val scopesArg = args[1] as List<String>?
            api.authenticateUserImplicitly(profileIdArg, scopesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.submitCustomRegistrationAction", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identityProviderIdArg = args[0] as String
            val dataArg = args[1] as String?
            api.submitCustomRegistrationAction(identityProviderIdArg, dataArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.cancelCustomRegistrationAction", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identityProviderIdArg = args[0] as String
            val errorArg = args[1] as String
            api.cancelCustomRegistrationAction(identityProviderIdArg, errorArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.fingerprintFallbackToPin", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fingerprintFallbackToPin() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.fingerprintDenyAuthenticationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fingerprintDenyAuthenticationRequest() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.fingerprintAcceptAuthenticationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fingerprintAcceptAuthenticationRequest() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.otpDenyAuthenticationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.otpDenyAuthenticationRequest() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.otpAcceptAuthenticationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.otpAcceptAuthenticationRequest() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.pinDenyAuthenticationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.pinDenyAuthenticationRequest() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.pinAcceptAuthenticationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pinArg = args[0] as String
            api.pinAcceptAuthenticationRequest(pinArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.pinDenyRegistrationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.pinDenyRegistrationRequest() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.pinAcceptRegistrationRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pinArg = args[0] as String
            api.pinAcceptRegistrationRequest(pinArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UserClientApi.cancelBrowserRegistration", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.cancelBrowserRegistration() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object ResourceMethodApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWRequestDetails.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWRequestResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is OWRequestDetails -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is OWRequestResponse -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ResourceMethodApi {
  fun requestResource(type: ResourceRequestType, details: OWRequestDetails, callback: (Result<OWRequestResponse>) -> Unit)

  companion object {
    /** The codec used by ResourceMethodApi. */
    val codec: MessageCodec<Any?> by lazy {
      ResourceMethodApiCodec
    }
    /** Sets up an instance of `ResourceMethodApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ResourceMethodApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ResourceMethodApi.requestResource", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val typeArg = ResourceRequestType.ofRaw(args[0] as Int)!!
            val detailsArg = args[1] as OWRequestDetails
            api.requestResource(typeArg, detailsArg) { result: Result<OWRequestResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object NativeCallFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWAuthenticationAttempt.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWCustomInfo.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OWOneginiError.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is OWAuthenticationAttempt -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is OWCustomInfo -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is OWOneginiError -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Native calls to Flutter
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
@Suppress("UNCHECKED_CAST")
class NativeCallFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NativeCallFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      NativeCallFlutterApiCodec
    }
  }
  /**Called to handle registration URL */
  fun n2fHandleRegisteredUrl(urlArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fHandleRegisteredUrl", codec)
    channel.send(listOf(urlArg)) {
      callback()
    }
  }
  /** Called to open OTP authentication. */
  fun n2fOpenAuthOtp(messageArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenAuthOtp", codec)
    channel.send(listOf(messageArg)) {
      callback()
    }
  }
  /** Called to close OTP authentication. */
  fun n2fCloseAuthOtp(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fCloseAuthOtp", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to open pin registration screen. */
  fun n2fOpenPinRequestScreen(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenPinRequestScreen", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to open pin authentication screen. */
  fun n2fOpenPinScreenAuth(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenPinScreenAuth", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to open pin authentication screen. */
  fun n2fOpenPinAuthenticator(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenPinAuthenticator", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to attempt next authentication. */
  fun n2fNextAuthenticationAttempt(authenticationAttemptArg: OWAuthenticationAttempt, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fNextAuthenticationAttempt", codec)
    channel.send(listOf(authenticationAttemptArg)) {
      callback()
    }
  }
  /** Called to close pin registration screen. */
  fun n2fClosePin(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fClosePin", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to close pin authentication screen. */
  fun n2fClosePinAuth(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fClosePinAuth", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to open fingerprint screen. */
  fun n2fOpenFingerprintScreen(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fOpenFingerprintScreen", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to scan fingerprint. */
  fun n2fShowScanningFingerprint(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fShowScanningFingerprint", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called when fingerprint was received. */
  fun n2fReceivedFingerprint(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fReceivedFingerprint", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called to close fingerprint screen. */
  fun n2fCloseFingerprintScreen(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fCloseFingerprintScreen", codec)
    channel.send(null) {
      callback()
    }
  }
  /** Called when the InitCustomRegistration event occurs and a response should be given (only for two-step) */
  fun n2fEventInitCustomRegistration(customInfoArg: OWCustomInfo?, providerIdArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fEventInitCustomRegistration", codec)
    channel.send(listOf(customInfoArg, providerIdArg)) {
      callback()
    }
  }
  /** Called when the FinishCustomRegistration event occurs and a response should be given */
  fun n2fEventFinishCustomRegistration(customInfoArg: OWCustomInfo?, providerIdArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fEventFinishCustomRegistration", codec)
    channel.send(listOf(customInfoArg, providerIdArg)) {
      callback()
    }
  }
  /** Called when error event was received. */
  fun n2fEventError(errorArg: OWOneginiError, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fEventError", codec)
    channel.send(listOf(errorArg)) {
      callback()
    }
  }
  /** Called whenever error occured. */
  fun n2fShowError(errorArg: OWOneginiError, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeCallFlutterApi.n2fShowError", codec)
    channel.send(listOf(errorArg)) {
      callback()
    }
  }
}
